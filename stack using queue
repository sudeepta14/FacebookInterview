class MyQueue {
    private Stack<Integer> s1;
    private Stack<Integer> s2;
    int front = 0;
    
    /** Initialize your data structure here. */
    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        while(!s2.isEmpty()){
            s1.push(s2.pop());
        }
        if(s1.empty())
             front = x;
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
       if(!s2.isEmpty()){
           int ans = s2.pop();
           if(!s2.isEmpty())
               front = s2.peek();
           return ans;
       }
        while(s1.size()>1){
            s2.push(s1.pop());
        }
        if(!s2.isEmpty()){
            front = s2.peek();
        }
        return s1.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        return front;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }
}
