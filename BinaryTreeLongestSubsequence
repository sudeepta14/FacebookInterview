From parent node to child node, find the longest common Consequetive Sequence:
class Solution {
      int max = 0;
    public int longestConsecutive(TreeNode root) {
       if(root == null)
           return 0;
        helper(root, 0, root.val);
        return max;
    }
    public void helper(TreeNode root, int curr, int target){
        if(root == null)
            return;
        if(root.val == target)
            curr++;
        else
            curr=1;
        max = Math.max(curr, max);
        helper(root.left, curr, root.val+1);
        helper(root.right, curr, root.val+1);
    }
    
    
  
}
// Recursive Solution
class Solution {
      int max = 0;
    public int longestConsecutive(TreeNode root) {
       
        if(root == null)
            return 0;
        helper(root, 1);
        return max;
    }
    public void helper(TreeNode root, int count){
    max = Math.max(max, count);
        if(root.left != null){
            helper(root.left, (root.left.val - root.val == 1? count+1:1));
        }
        if(root.right != null){
        helper(root.right, (root.right.val - root.val == 1? count+1:1));
        }
    }
}
