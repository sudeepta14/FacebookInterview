class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
       List<int[]> result = new ArrayList<>();
        List<int[]> height = new ArrayList<>();
        for(int[] b: buildings){
            height.add(new int[]{b[0], -b[2]});
            height.add(new int[]{b[1], b[2]});
        }
        // sort height based on the first value, if necessary use the second to break ties
        Collections.sort(height, (a,b) ->{
            if(a[0] != b[0])
                return a[0]-b[0];
            return a[1]-b[1];
        });
        
        // Use a maxheap to store possible heights
        Queue<Integer> pq = new PriorityQueue<>((a,b) -> (b-a));
        // add an initial value if no other values are inserted -- like a horizontal line for the skyline
        pq.offer(0);
        int prev = 0;
        
        for(int[] h :height){
            if(h[1] <0){
                pq.offer(-h[1]);
            }else{
                pq.remove(h[1]);
            }
        
        int cur = pq.peek();
        
        // compare current max height with the previous max height , update results and prev max height if necessary
        if(prev != cur){
            result.add(new int[]{h[0], cur});
            prev = cur;
        }
        }
        return result;
    }
}
