class Solution {
    public double knightProbability(int N, int K, int r, int c) {
        int[][] moves = {{1,2}, {1,-2}, {2,-1}, {2,1}, {-1,-2}, {-1,2}, {-2,1}, {-2,-1}};
        double[][] dp = new double[N][N];
        dp[r][c]=1;
        
        for(int round = 0; round < K ; round++){
            double dp1[][] = new double[N][N];
            for(int i =0; i<N; i++){
                for(int j=0; j<N;j++){
                    for(int m = 0 ; m < moves.length; m++){
                        if(i+moves[m][0] >= 0 && i+moves[m][0] < N && j+moves[m][1] >=0 && j+moves[m][1] < N )
                        {
                            dp1[i][j] += dp[i+moves[m][0]][j+moves[m][1]];
                        }
                    }
                    
                }
            }
            dp = dp1;
            dp1=null;
        }
        
        double sum=0;
        for(int i = 0; i<N;i++){
            for(int j=0; j<N;j++){
                sum += dp[i][j];
            }
        }
        return sum/Math.pow(8,K);
    }
}

Time Complexity : O(n2) . k
This is because we are executing k times on O(n2) entries
