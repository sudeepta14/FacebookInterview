class Solution {
    
   public void dfs(TreeNode root, Set<Integer> uniques){
       if(root != null){
           uniques.add(root.val);
           dfs(root.left, uniques);
           dfs(root.right, uniques);
       }
   }
    public int findSecondMinimumValue(TreeNode root) {
      Set<Integer> uniques = new HashSet<>();
        dfs(root, uniques);
        int min = root.val;
        long ans = Long.MAX_VALUE;
        for(int v : uniques){
            if(min < v && v < ans) ans = v;
        }
        return ans < Long.MAX_VALUE ? (int) ans : -1;
    }
}

// Using Map

class Solution {
    public int[] findErrorNums(int[] nums) {
        int dup =-1, missing = -1;
       Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n, 0)+1);
        }
        for(int i=1; i<=nums.length; i++){
            if(map.containsKey(i)){
                if(map.get(i) == 2){
                    dup = i;
                }
            }else{
                missing = i;
            }
        }
        return new int[] {dup, missing};
    }
}
