class Solution {
    public int largestPalindrome(int n) {
        if(n==1){
            return 9;
        }
        long maxNum = (long) Math.pow(10, n)-1;
        long minNum = (long) Math.pow(10, n-1);
        long maxProd = maxNum*maxNum;
        long firstHalf = maxProd/(long)Math.pow(10,n);
        
        while(true){
            long candidate=isPal(firstHalf--);
            for(long i=maxNum; i>=minNum; i--){
                if(candidate/i>maxNum) break;
                if(candidate%i == 0) return (int) (candidate%1337);
            }
        }
        
        
    }
    public long isPal(long num){
        String str = num + new StringBuilder().append(num).reverse().toString();
        return Long.parseLong(str);
    }
    
}

Time Complexity : O(N)
Space Complexity : O(N)
