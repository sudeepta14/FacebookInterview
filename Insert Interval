/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
     public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
         List<Interval> res = new ArrayList<>();
         if (newInterval == null) {
             return intervals;
         }
         // iterate through the intervals, there are three cases:

         // 1. for all intervals that are not overlapping with newInterval and before it,
         // directly add them to the result list
         // |---|  |---|
         //               |new interval|
         int i = 0;
         while (i < intervals.size() && intervals.get(i).end < newInterval.start) {
             res.add(intervals.get(i++));
         }
         // 2. for all possible intervals that are overlapping with newInterval
         // we try to merge them all together with the new interval
         // and eventually add the final merged interval to the result list
         // |---|         |----|
         //    |new interval|
         // NOTE: here I create a copy of newInterval because I don't want to modify the input parameter
         Interval temp = new Interval(newInterval.start, newInterval.end);
         while (i < intervals.size() && intervals.get(i).start <= temp.end) {
             temp.start = Math.min(intervals.get(i).start, temp.start);
             temp.end = Math.max(intervals.get(i++).end, temp.end);
         }
         res.add(temp);
         // 3. for intervals that are not overlapping with newInterval and after it,
         // directly add them to the result list
         //                      |----|
         //      |new interval| 
         while(i < intervals.size()) {
             res.add(intervals.get(i++));
         }
         return res;
     }
}
