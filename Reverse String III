class Solution {
    public String reverseWords(String s) {
        if(s==null || s.length()<2)
            return s;
        StringBuilder str = new StringBuilder(s);
        reverseHelper(str);
        return str.toString();
    }
    public void reverseHelper(StringBuilder newStr){
        int start=0;
        for(int i=0;i<=newStr.length(); i++){
            if(i == newStr.length() || Character.isWhitespace(newStr.charAt(i))){
                reverseDoer(start, i-1, newStr);
                start = i+1;
            } 
        }
    }
    public void reverseDoer(int start, int end, StringBuilder str){
        while(start < end){
        char temp = str.charAt(start);
        str.setCharAt(start, str.charAt(end));
        str.setCharAt(end, temp);
        start++;
        end--;
        }
    }
}

Time Complexity : O(N)
Space Complexity : O(n) where n is the number of characters in the string as we are creating a new stringbuilder.
