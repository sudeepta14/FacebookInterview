class Solution {
    private int n;
    private int m;
    
    public int numIslands(char[][] grid) {
        int count = 0;
        n=grid.length;
        if(n==0){
            return 0;
        }
        m = grid[0].length;
        for(int i=0;i<n;i++){
            for(int j=0; j<m;j++){
                if(grid[i][j] == '1'){
                    dfsMatrix(grid, i, j);
                    ++count;
                }
            }
        }
        return count;
    }
    private void dfsMatrix(char[][] grid, int i, int j){
        if(i<0||j<0||i>=n||j>=m|| grid[i][j] != '1') return;
        grid[i][j] = '0';
        dfsMatrix(grid, i+1, j);
        dfsMatrix(grid, i-1,j);
        dfsMatrix(grid,i,j+1);
        dfsMatrix(grid, i, j-1);
    }
}
Time Complexity : O(m*n)
Space Complexity: O(m*n) in case of the grid map is filled with lands where DFS goes m*n deep. 
