class Solution {
    public int minMeetingRooms(Interval[] intervals) {
       if(intervals.length == 0)
           return 0;
        
        //Adding Priority Queue like a minimum heap
        
        PriorityQueue<Integer> allocator = new PriorityQueue<Integer>(intervals.length, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return a-b;
            }
        });
        
        Arrays.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b){
                return a.start - b.start;
            }
        });
        allocator.add(intervals[0].end);
        
        for(int i =1; i<intervals.length;i++){
            if(intervals[i].start >= allocator.peek()){
                allocator.poll();
            }
            allocator.add(intervals[i].end);
        }
        return allocator.size();
    }
}
