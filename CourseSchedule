class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int [][]matrix = new int[numCourses][numCourses]; // new int[2][2]
        int []indegree = new int [numCourses]; // new int[2]
        
        for(int i=0; i<prerequisites.length; i++){
            int ready = prerequisites[i][0]; // 1
            int pre = prerequisites[i][1]; // 0
            if(matrix[pre][ready] == 0){
                indegree[ready]++; // matrix[0][1] == 0 , indegree[1] ++
            }
            matrix[pre][ready] = 1;
        }
        int count =0;
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0; i<indegree.length;i++){
            if(indegree[i] == 0){
                queue.offer(i); // queue = 0
            }
        }
        while(!queue.isEmpty()){
            int course = queue.poll(); // 1
            count++; //count = 2
            for(int i=0; i<numCourses; i++){ //i = 0,1
                if(matrix[course][i] != 0){ // matrix[0][0] = 0, matrix [0][1] == 0
                    if(--indegree[i] ==0){
                        queue.offer(i); //1
                    }
                }
            }
        }
        return count == numCourses;
    }
}
