class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        
//         Array [1,1,1,2,2,3,3,3]
            
//         Map : 1, 3   2,1   3,3 
            
//         Bucket [2] [] [1,3]
            
//         Suppose k = 2 , we have to return 1,3
        
      // Counting the frequency of elements inside a HashMap
        
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
        
        // Adding the frequency count inside a bucket --- which is linked to a LinkedList
        
        List<Integer> [] bucket = new List[nums.length+1];
        
        for(int n: map.keySet()){
            int freq = map.get(n);
            if(bucket[freq] == null)
                bucket[freq]=new LinkedList<>();
            bucket[freq].add(n);
        }
        
        // Return list of those integers with max frequency for a size of k
        // start from the last
        
        List<Integer> res = new LinkedList<>();
        for(int i=bucket.length-1; i>0 && k >0 ;i--){
            if(bucket[i] != null){
                List<Integer> list = bucket[i];
                res.addAll(list);
                k-=list.size();
            }
        }
        return res;
    }
}

