This solution is O(n) O(1)

class Solution {
    public int trap(int[] height) {
        int lo = 0;
        int hi = height.length - 1;
        int leftMax = 0;
        int rightMax = 0;
        int res = 0;
        while (lo < hi) {
            if (height[lo] < height[hi]) {
                if (height[lo] > leftMax) leftMax = height[lo];
                res += leftMax - height[lo];
                lo += 1;
            } else {
                if (height[hi] > rightMax) rightMax = height[hi];
                res += rightMax - height[hi];
                hi -= 1;
            }
        }
        return res;
    }
}
This solution is O(n) and space utilization is O(n)
class Solution {
    public int trap(int[] height) {
        int totalAmount = 0;
        if(height == null || height.length == 0){
            return totalAmount;
        }
        
        int[] leftHighest = new int[height.length+1];
        leftHighest[0] =0;
        
        for(int i=0; i<height.length; i++){
            leftHighest[i+1] = Math.max(leftHighest[i], height[i]); 
        }
        
        int rightHighest =0;
        for(int i=height.length -1; i>=0 ; i--){
            rightHighest = Math.max(height[i], rightHighest);
            totalAmount += Math.min(leftHighest[i], rightHighest) > height[i]? Math.min(leftHighest[i], rightHighest) - height[i]: 0;
        }
        return totalAmount;
        
    }
}
