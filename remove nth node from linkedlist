class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        int length = 0;
        ListNode first = head;
        // finding total length of the linkedlist
        while(first != null){
            length++;
            first = first.next;
        }
        // subtract the number to get to the particular node from the last
        length -=n;
        first = dummy;
        while(length > 0){
            length--;
            first = first.next;
        }
        // then point the prev node ka next to the next next. 
        first.next = first.next.next;
        return dummy.next;
        // work is completed. 
    }
}
//Two pointer solution

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
       // Using two pointers
       
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode first = dummy;
        ListNode second = dummy;
        for(int i=1; i<=n+1; i++){
            first = first.next;
        }
        while(first != null){
            first = first.next;
            second = second.next;
        }
        second.next = second.next.next;
        return dummy.next;
                          
    }
}
