class Solution {
    public List<String> letterCombinations(String digits) {
     String[] digitLetter = {"", "", "abc", "def", "ghi", "jkl","mno", "pqrs", "tuv", "wxyz"};
        List<String> result = new ArrayList<>();
        if(digits.length() == 0)
            return result;
        result.add("");
        for(int i=0; i<digits.length(); i++){
        result= combine(digitLetter[digits.charAt(i) - '0'], result);
            }
        return result;
    }
    public static List<String> combine(String digit, List<String> l){
        List<String> result = new ArrayList<>();
        for(int i=0; i<digit.length();i++){
            for(String x: l){
                result.add(x+digit.charAt(i));
            }
        }
        return result;
    }
}
// Recursion solution -- 2ms O(4N) Space -- 
class Solution {
    String[] store = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    public List<String> letterCombinations(String digits) {
        
        List<String> result = new ArrayList<>();
        if(digits == null || digits.length()== 0){
            return result;
        }
        helper(result, digits, new StringBuilder(), 0);
        return result;
    }
    private void helper(List<String> result, String digits, StringBuilder runStr, int idx){
        if(idx == digits.length()){
            result.add(runStr.toString());
            return;
        }
        char[] chars = store[digits.charAt(idx) - '0'].toCharArray();
        for(char c: chars){
            helper(result, digits, runStr.append(c), idx+1);
            runStr.deleteCharAt(runStr.length()-1);
        }
    }
}
