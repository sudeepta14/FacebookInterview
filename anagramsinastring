class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ans = new ArrayList<>();
        if(s.length()<p.length()){
            return ans;
        }
        int[] map_s = new int[26];
        int[] map_p = new int[26];
        
        for(int i=0;i<p.length();i++){
            map_s[s.charAt(i)-'a']++;
            map_p[p.charAt(i)-'a']++;
        }
        
        // Sliding Window usage... 
        
        //Find the next letter in the string array and check if it matches with the pattern. 
        
        for(int i=0;i<=s.length()-p.length();i++){
            if(isMatch(map_s,map_p)){
                ans.add(i);
            }
            if(i!=s.length()-p.length()){
                map_s[s.charAt(i)-'a']--;
                map_s[s.charAt(i+p.length())-'a']++;
            }
        }
        return ans;
    }
    public boolean isMatch(int[] map1, int[] map2){
        for(int i=0;i<map1.length;i++){
            if(map1[i]!=map2[i]){
                return false;
            }
        }
        return true;
    }
}

Time Complexity : O(n)
Space Complexity: O(1)
