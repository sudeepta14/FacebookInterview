class MedianFinder {
   //change to a maximum heap
    /** initialize your data structure here. */
     PriorityQueue<Integer> minHeap = new PriorityQueue<>();//heap is a minimal heap by default
PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
    public MedianFinder() {
        
    }
    
    public void addNum(int num) {
        maxHeap.offer(num);
	minHeap.offer(maxHeap.poll());
	if (maxHeap.size() < minHeap.size())
		maxHeap.offer(minHeap.poll());
    }
    
    public double findMedian() {
        if (maxHeap.size() == minHeap.size())
		return (maxHeap.peek() + minHeap.peek()) / 2.0;
	else
		return maxHeap.peek();
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
 
 Time Complexity : O(logn)
 Space Complexity: O(n)
 
