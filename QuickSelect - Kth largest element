class Solution {
    public int findKthLargest(int[] nums, int k) {
        k = nums.length - k;
        return quickSelect(nums, 0, nums.length - 1, k);
    }
    
    private int quickSelect(int[] nums, int start, int end, int k) {
        if (start == end)
            return nums[start];
        
        int i = start, j = end;
        int pivotal = nums[(start + end) /  2];
        
        while (i <= j) {
            while (i <= j && nums[i] < pivotal)
                ++i;
            while (i <= j && nums[j] > pivotal)
                --j;
            if (i <= j) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                ++i;
                --j;
            }
        }
        
        if (k <= j)
            return quickSelect(nums, start, j, k);
        if (k >= i)
            return quickSelect(nums, i, end, k);
        
        return nums[k];
    }
}

O(n) solution.
Space O(1)
