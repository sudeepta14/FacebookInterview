class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        
        // Variable definations
        
      boolean [][] visited = new boolean [maze.length][maze[0].length];
        int[][] dirs = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        Queue<int[]> q = new LinkedList<>();
        
        q.add(start);
        visited[start[0]][start[1]]=true;
        
        
        while(!q.isEmpty()){
            int[] s = q.remove();
            if(s[0] == destination[0] && s[1]== destination[1]) return true;
            
            
            for(int [] dir : dirs){
                int x = s[0]+dir[0];
                int y = s[1]+dir[1];
                
                while(x >=0 && y>=0 && x <maze.length && y<maze[0].length && maze[x][y]==0){
                    x+=dir[0];
                    y+=dir[1];
                }
            
            
            if(!visited[x-dir[0]] [y-dir[1]]){
                q.add(new int[] { x-dir[0], y-dir[1]});
                visited[x-dir[0]][y-dir[1]]=true;
            }
            }
        }
        return false;
    }
}

Time Complexity : O(m*n)
Space Complexity: O(m*n)
