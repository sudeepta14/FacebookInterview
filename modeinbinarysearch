class Solution {
    public int[] findMode(TreeNode root) {
       Queue<TreeNode> q = new LinkedList<>();
        Map<Integer,Integer> map = new HashMap<>();
        int max = 0;
        if(root == null){
            return new int[0];
        }
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0; i<size; i++){
                TreeNode node = q.poll();
                map.put(node.val, map.getOrDefault(node.val, 0)+1);
                max = Math.max(max, map.get(node.val));
                if(node.left != null){
                    q.add(node.left);
                }
                if(node.right != null){
                    q.add(node.right);
                }
            }
        }
        
       List<Integer> list = new LinkedList<>();
        for(int key : map.keySet()){
            if(map.get(key) == max){
                list.add(key);
            }
        }
        
        int[] res = new int[list.size()];
        for(int i =0; i<res.length; i++){
            res[i] = list.get(i);
        }
        return res;
        
    }
}

Time Complexity ?: O(n)
Space Complexity : O(n) -- queue 
