lass Solution {
   int[][] grid;
    boolean[][] seen;
    ArrayList<Integer> shape;
    
     public void explore(int r, int c, int di){
        if(0<=r && r<grid.length && 0 <=c && c<grid[0].length && grid[r][c]==1 && !seen[r][c]){
            seen[r][c] = true;
            shape.add(di);
            explore(r+1, c, 1);
            explore(r-1, c, 2);
            explore (r, c+1, 3);
            explore(r, c-1, 4);
            shape.add(0);
        }
    }
    

    public int numDistinctIslands(int[][] grid) {
     this.grid = grid;
    seen = new boolean[grid.length][grid[0].length];
    Set shapes = new HashSet<ArrayList<Integer>>();
        for(int r = 0; r<grid.length;r++){
            for(int c=0;c<grid[0].length;c++){
                shape= new ArrayList<Integer>();
                explore(r, c, 0);
                if(!shape.isEmpty()){
                    shapes.add(shape);
                }
        }
           
    }
         return shapes.size();
    }
        
   
   
}

The time complexity is O(R*C) as we are visiting R rows and C columns
The space complexity is O(R*C) as this is the space used to keep track of visited squares or shapes. 
