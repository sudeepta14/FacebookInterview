Two approaches:
One is the normal simple process
class Solution:
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        # ans list
        ans = []

        for num in range(1,n+1):

            divisible_by_3 = (num % 3 == 0)
            divisible_by_5 = (num % 5 == 0)

            if divisible_by_3 and divisible_by_5:
                # Divides by both 3 and 5, add FizzBuzz
                ans.append("FizzBuzz")
            elif divisible_by_3:
                # Divides by 3, add Fizz
                ans.append("Fizz")
            elif divisible_by_5:
                # Divides by 5, add Buzz
                ans.append("Buzz")
            else:
                # Not divisible by 3 or 5, add the number
                ans.append(str(num))

        return ans


Other one is hashmap process
class Solution:
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        # ans list
        ans = []
        fizz_buzz_dict = {3 :"Fizz", 5:"Buzz"}
        for num in range(1, n+1):
            num_ans_str = ""
            for key in fizz_buzz_dict.keys():
                if(num%key == 0):
                    num_ans_str+= fizz_buzz_dict[key]
            if not num_ans_str:
                num_ans_str = str(num)
                
            ans.append(num_ans_str)
        return ans
            
