class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode target = root, parent = null;
        
        //Search Node
        while(target != null && target.val!=key){
            parent=target;
            if(key > target.val)target = target.right;
            else target = target.left;
        }
        
        if(target == null) return root;
        
        if(target.left == null && target.right == null){
            if(parent==null) return null;
            if(target == parent.left) parent.left = null;
            else parent.right = null;
            return root;
        }
        
        if(target.left == null){
            if(parent == null) return target.right;
            if(target == parent.left) parent.left = target.right;
            else parent.right = target.right;
            return root;
        }
        
        if(target.right == null){
            if(parent == null) return target.left;
            if(target == parent.left) parent.left = target.left;
            else parent.right = target.left;
        }
        
        // Case 3:
        
        TreeNode prev = target, p = target.right;
        while(p.left!=null){
            prev=p;
            p=p.left;
        }
        target.val = p.val;
        if(p == prev.left) prev.left = p.right;
        else prev.right = p.right;
        return root;
    }
}
