class Solution {
    public List<List<String>> partition(String s) {
      List<List<String>> list = new ArrayList<>();
        List<String> tempList = new ArrayList<>();
        palindromeChunks(s, list, tempList, 0);
        return list;
    }
    
    void palindromeChunks(String s, List<List<String>> list, List<String> tempList, int start){
        if(tempList.size()>0 && start >= s.length()){
            list.add(new ArrayList<>(tempList));
            return;
        }
        for(int i=start; i<s.length();i++){
        if(isPali(s, start, i)){
            tempList.add(s.substring(start, i+1));
            palindromeChunks(s, list, tempList, i+1);
            tempList.remove(tempList.size()-1);
        }
        }
        
    }
    
    boolean isPali(String s , int start, int end){
        while(start < end){
            if(s.charAt(start++) != s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}
