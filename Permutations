class Solution {
    public List<List<Integer>> permute(int[] nums) {
      List<List<Integer>> list = new ArrayList<>();
        backtrack(list, new ArrayList<>(), nums);
        return list;
    }
    public void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] nums){
        if(tempList.size() == nums.length){
            list.add(new ArrayList<>(tempList));
            return;
        }
        else{
            for(int i=0;i<nums.length;i++){
                if(tempList.contains(nums[i])) continue;
                tempList.add(nums[i]);
                backtrack(list, tempList, nums);
                tempList.remove(tempList.size() -1);
            }
        }
    }
}


public List<List<Integer>> permute(int[] nums) {
    List<List<Integer>> ret = new ArrayList<List<Integer>>();
    backTrack(ret, new LinkedHashSet<Integer>(), nums);
    return ret;
}
    
private void backTrack(List<List<Integer>> ret, Set<Integer> set, int[] nums) {
    if(set.size() == nums.length) ret.add(new ArrayList<Integer>(set));
    else {
        for(int i = 0; i < nums.length; i++) {
            if(set.add(nums[i])) {
                backTrack(ret, set, nums);
                set.remove(nums[i]);
            }
        }
    }
}
